; ModuleID = 'loc3.c'
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.11.0"

@.str = private unnamed_addr constant [16 x i8] c"%d %d %d %d %d\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define i32 @main(i32 %argc, i8** %args) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %args.addr = alloca i8**, align 8
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %z = alloca i32, align 4
  %k = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %l = alloca i32, align 4
  %o = alloca i32, align 4
  %q = alloca i32, align 4
  %thing = alloca [10 x i32], align 16
  %p = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %args, i8*** %args.addr, align 8
  %0 = load i8**, i8*** %args.addr, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %0, i64 1
  %1 = load i8*, i8** %arrayidx, align 8
  %call = call i32 @atoi(i8* %1)
  store i32 %call, i32* %x, align 4
  %2 = load i8**, i8*** %args.addr, align 8
  %arrayidx1 = getelementptr inbounds i8*, i8** %2, i64 2
  %3 = load i8*, i8** %arrayidx1, align 8
  %call2 = call i32 @atoi(i8* %3)
  store i32 %call2, i32* %y, align 4
  %4 = load i8**, i8*** %args.addr, align 8
  %arrayidx3 = getelementptr inbounds i8*, i8** %4, i64 3
  %5 = load i8*, i8** %arrayidx3, align 8
  %call4 = call i32 @atoi(i8* %5)
  store i32 %call4, i32* %z, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %l, align 4
  store i32 0, i32* %o, align 4
  store i32 0, i32* %q, align 4
  %arrayidx5 = getelementptr inbounds [10 x i32], [10 x i32]* %thing, i64 0, i64 1
  store i32 10, i32* %arrayidx5, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  call void @exit(i32 0) #3
  unreachable

do.cond:                                          ; No predecessors!
  %6 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %6, 5
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc14, %do.end
  %7 = load i32, i32* %i, align 4
  %cmp6 = icmp slt i32 %7, 2
  br i1 %cmp6, label %for.body, label %for.end16

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %p, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc, %for.body
  %8 = load i32, i32* %p, align 4
  %cmp8 = icmp slt i32 %8, 2
  br i1 %cmp8, label %for.body9, label %for.end

for.body9:                                        ; preds = %for.cond7
  %9 = load i32, i32* %x, align 4
  %10 = load i32, i32* %y, align 4
  %mul = mul nsw i32 %9, %10
  store i32 %mul, i32* %a, align 4
  %11 = load i32, i32* %z, align 4
  %shl = shl i32 %11, 2
  store i32 %shl, i32* %b, align 4
  %12 = load i32, i32* %b, align 4
  %13 = load i32, i32* %a, align 4
  %add = add nsw i32 %12, %13
  store i32 %add, i32* %j, align 4
  %14 = load i32, i32* %b, align 4
  %mul10 = mul nsw i32 3, %14
  store i32 %mul10, i32* %l, align 4
  %15 = load i32, i32* %p, align 4
  %16 = load i32, i32* %i, align 4
  %add11 = add nsw i32 %15, %16
  store i32 %add11, i32* %o, align 4
  %17 = load i32, i32* %y, align 4
  %18 = load i32, i32* %x, align 4
  %idxprom = sext i32 %18 to i64
  %arrayidx12 = getelementptr inbounds [10 x i32], [10 x i32]* %thing, i64 0, i64 %idxprom
  %19 = load i32, i32* %arrayidx12, align 4
  %add13 = add nsw i32 %17, %19
  store i32 %add13, i32* %q, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body9
  %20 = load i32, i32* %p, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %p, align 4
  br label %for.cond7

for.end:                                          ; preds = %for.cond7
  br label %for.inc14

for.inc14:                                        ; preds = %for.end
  %21 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %21, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond

for.end16:                                        ; preds = %for.cond
  %22 = load i32, i32* %k, align 4
  %23 = load i32, i32* %j, align 4
  %24 = load i32, i32* %l, align 4
  %25 = load i32, i32* %o, align 4
  %26 = load i32, i32* %q, align 4
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0), i32 %22, i32 %23, i32 %24, i32 %25, i32 %26)
  %27 = load i32, i32* %retval, align 4
  ret i32 %27
}

declare i32 @atoi(i8*) #1

; Function Attrs: noreturn
declare void @exit(i32) #2

declare i32 @printf(i8*, ...) #1

attributes #0 = { nounwind ssp uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="core2" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="core2" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="core2" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"PIC Level", i32 2}
!1 = !{!"clang version 3.9.0 (trunk 261153) (llvm/trunk 261151)"}
